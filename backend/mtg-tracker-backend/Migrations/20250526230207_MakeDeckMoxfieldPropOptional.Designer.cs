// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mtg_tracker.Models;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mtg_tracker.Migrations
{
    [DbContext(typeof(MtgContext))]
    [Migration("20250526230207_MakeDeckMoxfieldPropOptional")]
    partial class MakeDeckMoxfieldPropOptional
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mtg_tracker.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Commander")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("commander");

                    b.Property<string>("Moxfield")
                        .HasColumnType("text")
                        .HasColumnName("moxfield");

                    b.Property<int>("NumGames")
                        .HasColumnType("integer")
                        .HasColumnName("num_games");

                    b.Property<int>("NumWins")
                        .HasColumnType("integer")
                        .HasColumnName("num_wins");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_deck");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_deck_user_id");

                    b.ToTable("deck", (string)null);
                });

            modelBuilder.Entity("Mtg_tracker.Models.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Requester")
                        .HasColumnType("integer")
                        .HasColumnName("requester");

                    b.Property<int>("Uid1")
                        .HasColumnType("integer")
                        .HasColumnName("uid1");

                    b.Property<int>("Uid2")
                        .HasColumnType("integer")
                        .HasColumnName("uid2");

                    b.HasKey("Id")
                        .HasName("pk_friend_requests");

                    b.HasIndex("Uid1")
                        .HasDatabaseName("ix_friend_requests_uid1");

                    b.HasIndex("Uid2")
                        .HasDatabaseName("ix_friend_requests_uid2");

                    b.ToTable("friend_requests", null, t =>
                        {
                            t.HasCheckConstraint("CK_Uid_Order", "uid1 < uid2");
                        });
                });

            modelBuilder.Entity("Mtg_tracker.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer")
                        .HasColumnName("minutes");

                    b.Property<int>("NumPlayers")
                        .HasColumnType("integer")
                        .HasColumnName("num_players");

                    b.Property<int>("NumTurns")
                        .HasColumnType("integer")
                        .HasColumnName("num_turns");

                    b.HasKey("Id")
                        .HasName("pk_game");

                    b.ToTable("game", (string)null);
                });

            modelBuilder.Entity("Mtg_tracker.Models.GameParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeckId")
                        .HasColumnType("integer")
                        .HasColumnName("deck_id");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<bool>("Won")
                        .HasColumnType("boolean")
                        .HasColumnName("won");

                    b.HasKey("Id")
                        .HasName("pk_game_participation");

                    b.HasIndex("DeckId")
                        .HasDatabaseName("ix_game_participation_deck_id");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_participation_game_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_game_participation_user_id");

                    b.ToTable("game_participation", (string)null);
                });

            modelBuilder.Entity("Mtg_tracker.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.HasKey("Id")
                        .HasName("pk_room");

                    b.HasIndex("GameId")
                        .IsUnique()
                        .HasDatabaseName("ix_room_game_id");

                    b.ToTable("room", (string)null);
                });

            modelBuilder.Entity("Mtg_tracker.Models.StatSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("CurrentLossStreak")
                        .HasColumnType("integer")
                        .HasColumnName("current_loss_streak");

                    b.Property<int>("CurrentWinStreak")
                        .HasColumnType("integer")
                        .HasColumnName("current_win_streak");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("games_played");

                    b.Property<int>("GamesWon")
                        .HasColumnType("integer")
                        .HasColumnName("games_won");

                    b.Property<int>("LongestLossStreak")
                        .HasColumnType("integer")
                        .HasColumnName("longest_loss_streak");

                    b.Property<int>("LongestWinStreak")
                        .HasColumnType("integer")
                        .HasColumnName("longest_win_streak");

                    b.Property<int>("NumDecks")
                        .HasColumnType("integer")
                        .HasColumnName("num_decks");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_stat_snapshots");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_stat_snapshots_user_id");

                    b.ToTable("stat_snapshots", (string)null);
                });

            modelBuilder.Entity("Mtg_tracker.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Profile")
                        .HasColumnType("text")
                        .HasColumnName("profile");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<int>("FriendsId")
                        .HasColumnType("integer")
                        .HasColumnName("friends_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("FriendsId", "UserId")
                        .HasName("pk_user_user");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_user_user_id");

                    b.ToTable("user_user", (string)null);
                });

            modelBuilder.Entity("Mtg_tracker.Models.Deck", b =>
                {
                    b.HasOne("Mtg_tracker.Models.User", "User")
                        .WithMany("Decks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deck_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mtg_tracker.Models.FriendRequest", b =>
                {
                    b.HasOne("Mtg_tracker.Models.User", "User1")
                        .WithMany()
                        .HasForeignKey("Uid1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_users_uid1");

                    b.HasOne("Mtg_tracker.Models.User", "User2")
                        .WithMany()
                        .HasForeignKey("Uid2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_users_uid2");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Mtg_tracker.Models.GameParticipation", b =>
                {
                    b.HasOne("Mtg_tracker.Models.Deck", "Deck")
                        .WithMany("GameParticipations")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_participation_deck_deck_id");

                    b.HasOne("Mtg_tracker.Models.Game", "Game")
                        .WithMany("GameParticipations")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_participation_game_game_id");

                    b.HasOne("Mtg_tracker.Models.User", "User")
                        .WithMany("GameParticipations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_participation_users_user_id");

                    b.Navigation("Deck");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mtg_tracker.Models.Room", b =>
                {
                    b.HasOne("Mtg_tracker.Models.Game", "Game")
                        .WithOne("Room")
                        .HasForeignKey("Mtg_tracker.Models.Room", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_room_game_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Mtg_tracker.Models.StatSnapshot", b =>
                {
                    b.HasOne("Mtg_tracker.Models.User", "User")
                        .WithOne("StatSnapshot")
                        .HasForeignKey("Mtg_tracker.Models.StatSnapshot", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stat_snapshots_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("Mtg_tracker.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_user_users_friends_id");

                    b.HasOne("Mtg_tracker.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_user_users_user_id");
                });

            modelBuilder.Entity("Mtg_tracker.Models.Deck", b =>
                {
                    b.Navigation("GameParticipations");
                });

            modelBuilder.Entity("Mtg_tracker.Models.Game", b =>
                {
                    b.Navigation("GameParticipations");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Mtg_tracker.Models.User", b =>
                {
                    b.Navigation("Decks");

                    b.Navigation("GameParticipations");

                    b.Navigation("StatSnapshot");
                });
#pragma warning restore 612, 618
        }
    }
}
